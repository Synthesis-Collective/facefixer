using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Records;

namespace FaceFixer
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "FaceFixer.esp")
                .Run(args);
        }
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (Settings.Value.TargetMods.Count == 0)
            {
                System.Console.WriteLine("Must at least specify one target mod in order to do anything.");
                return;
            }

            var npcGroups = state.LoadOrder.ListedOrder
                .Select(listing => listing.Mod)
                .NotNull()
                .Select(x => (x.ModKey, x.Npcs))
                .Where(x => x.Npcs.Count > 0 && Settings.Value.TargetMods.Contains(x.ModKey))
                .ToArray();

            if (Settings.Value.PrioritizeBySpecifiedOrder)
            {
                npcGroups = npcGroups
                    .OrderBy(
                        x => x.ModKey,
                        Comparer<ModKey>.Create((x, y) => Settings.Value.TargetMods.IndexOf(x).CompareTo(Settings.Value.TargetMods.IndexOf(y))))
                    .ToArray();
            }

            System.Console.WriteLine("Files to map to:");
            foreach (var modKey in npcGroups.Select(x => x.ModKey))
            {
                System.Console.WriteLine($"  {modKey}");
            }

            uint count = 0;

            // For every Npc that exists
            foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                // For every Npc group in our target mods, in order
                foreach (var npcGroup in npcGroups)
                {
                    // If our target mod contains a copy of the npc
                    if (!npcGroup.Npcs.TryGetValue(npc.FormKey, out var sourceNpc)) continue;

                    // Copy in the face bits
                    var modifiedNpc = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                    modifiedNpc.DeepCopyIn(sourceNpc, new Npc.TranslationMask(false)
                    {
                        AttackRace = Settings.Value.PatchAttackRace,
                        DefaultOutfit = Settings.Value.PatchDefaultOutfit,
                        FaceMorph = Settings.Value.PatchFaceMorph,
                        FaceParts = Settings.Value.PatchFaceParts,
                        FarAwayModel = Settings.Value.PatchFarAwayModel,
                        HairColor = Settings.Value.PatchHairColor,
                        HeadParts = Settings.Value.PatchHeadParts,
                        HeadTexture = Settings.Value.PatchHeadTexture,
                        Height = Settings.Value.PatchHeight,
                        SleepingOutfit = Settings.Value.PatchSleepingOutfit,
                        TextureLighting = Settings.Value.PatchTextureLighting,
                        TintLayers = Settings.Value.PatchTintLayers,
                        Weight = Settings.Value.PatchWeight,
                        WornArmor = Settings.Value.PatchWornArmor,

                    });
                    count++;
                }
            }

            System.Console.WriteLine($"Patched {count} Npcs");
        }
    }
}
